#### 03/02/23 first attempt ####
# I decided to study the NDVI of the Po Valley, a highly cultivated area, to assess how NDVI varies over months and years as t° changes
# using sentinel2 data

#### study area ####
# the study area under consideration is the padana plain with particular focus on the area south of Parma 
# To get the shp of the study area I converted a tiff image of the Po Valley to shp using Qgis
# link tiff file https://www.esa.int/Space_in_Member_States/Italy/Immagine_EO_della_Settimana_Pianura_Padana 
# 



#  First of all we need to install addictional packages usefull to run my project with the function install.packages
# packages usefull are "tidyr", "rgdal"* , "ggplot2"*, "terra"*, "leaflet", "rasterVis", "gridExtra"* , "RColorBrewer", "plotly"
# * = already imported in R during the lessons 

#### tidyr package #####
# tidyr package : Tidy Messy Data Tools to help to create tidy data, 
# where each column is a variable, each row is an observation, and each cell contains a single value
# link: https://cran.r-project.org/web/packages/tidyr/index.html

#### rgdal package ####
# rgdal package: Bindings for the 'Geospatial' Data Abstraction Library 
# Provides bindings to the 'Geospatial' Data Abstraction Library ('GDAL') (>= 1.11.4) 
# and access to projection/transformation operations from the 'PROJ' library. 
# link: https://cran.r-project.org/web/packages/rgdal/index.html

#### ggplot2 package ####
# ggplot2 package: Create Elegant Data Visualisations Using the Grammar of Graphics
# A system for 'declaratively' creating graphics, based on "The Grammar of Graphics". 
# You provide the data, tell 'ggplot2' how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.
# link: https://cran.r-project.org/web/packages/ggplot2/index.html

#### terra package ####
# terra package: Spatial Data Analysis
# Methods for spatial data analysis with vector (points, lines, polygons) and raster (grid) data.
# link: https://cran.r-project.org/web/packages/terra/index.html

#### leaflet package ####
# leaflet package: Create Interactive Web Maps with the JavaScript 'Leaflet' Library
# Create and customize interactive maps using the 'Leaflet' JavaScript library and the 'htmlwidgets' package
# link: https://cran.r-project.org/web/packages/leaflet/index.html

#### rasterVis package #### 
# rasterVis package: Visualization Methods for Raster Data
# Methods for enhanced visualization and interaction with raster data
# link: https://cran.r-project.org/web/packages/rasterVis/index.html

#### gridExtra package ####
# gridExtra package: Miscellaneous Functions for "Grid" Graphics
# Provides a number of user-level functions to work with "grid" graphics, notably to arrange multiple grid-based plots on a page, and draw tables.
# link: https://cran.r-project.org/web/packages/gridExtra/index.html

#### RColorBrewer package ####
# RColorBrewer package: ColorBrewer Palettes
# Provides color schemes for maps (and other graphics) designed by Cynthia Brewer as described at http://colorbrewer2.org.
# similar to ColorRampPalette used during the lessons
# link: https://cran.r-project.org/web/packages/RColorBrewer/index.html

#### plotly package ####
# plotly package Create Interactive Web Graphics via 'plotly.js'
# https://cran.r-project.org/web/packages/plotly/index.html

######### try to run something in R ####### 

install.packages("tidyr")
install.packages("rgdal")
install.packages("ggplot2")
install.packages("terra")
install.packages("leaflet")
install.packages("rasterVis")
install.packages("gridExtra")
install.packages("RColorBrewer")
install.packages("plotly")

# all the packages are imported into R 



library(terra)
library(leaflet)
library(rasterVis)
library(gridExtra)
library(RColorBrewer)
library(plotly)
library(raster)
library(rgdal)
library(ggplot2)
library(tidyr)

# Now set the working directory 
setwd("/Users/account2/Desktop/exam_monitoring")

# load shp file of the study area and the shp file of the points of interest 

#try to "read" the study area in r 
Study_Area <- readOGR("Crop_area.shp")
points_SA <- readOGR("Point_of_interest.shp")

Study_Area2 <- spTransform(Study_Area, CRS("+proj=utm +zone=32 +datum=WGS84 +units=m"))

#try to plot a map with the study area poligon using the leaflet package

map <- leaflet(sizingPolicy = leafletSizingPolicy(defaultHeight = 200, viewer.suppress = TRUE, knitr.figure = FALSE)) %>%
       addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
       addPolygons(data = Study_Area2,
       stroke = FALSE,
       smoothFactor = 0.5
                 )
                 
map

# FUNZIONA #

# Load Sentinel-2 data of the study area that goes from may 2022 to october 2022
# setting the specific folder where the data are 
# the data used are derived from Sentinel-2 copernicus open access hub website and I decide to use 
# the level 2A of Sentinel - 2 that use the bottom of the atm reflectance 
# and create the variable S2 = sentinel - 2 

S2 <- "/Users/account2/Desktop/exam_monitoring/Sentinel2/"

# overwrite the variable S2 with a list by using the list.files function of R

S2 <- list.files(S2, recursive = TRUE, full.names = TRUE, pattern = "B0[2348]_10m.jp2$")

# S2 variable pointing to the path /Users/account2/Desktop/exam_monitoring/sentinel2
# recursive is important to go into the different subfolders within the sentinel2 folder
# look for files with a specific pattern that is = "B0[2348]_10m.jp2s" 
# 2348 are the bands

S2 <- lapply(1:length(S2), function (x) {raster(S2[x])})
# input = 1 : length(S2) = list of file and I want to apply to each element of the list a specific funcion to load the file into r (with the raster function)
# raster function load raster file into r 

S2

# visualize the product 

# setting the layout 
# create a stack and putting in together the raster list file 

S2_stack <- stack(S2) 

# raster issue : Errore in compareRaster(x) : different extent
# extent(S2) to find the differences 
# I found that some files have different names so I change them with files of the same name

# Plot True/False images 
# using the plotRGB of the raster package 
# plotRGB has a multilayer stack where each layer is a band 
# I need to specify in which layer I have the red, green and blue band
# since the file are imported in the order 2348, 
# the blue band (=2 in Sentinel2) is in the index 1
# the green band (=3 in Sentinel2) is in the index 2
# the red band (=4 in sentinel2) is in the index 3
par(mfrow=c(1,2))
plotRGB (S2_stack, r=3, g=2, b=1, scale=maxValue(S2[[2]]), stretch='hist') #TrueColor image 
plot(Study_Area2, add=TRUE, border='yellow', lwd=5) #add the study area on the previous plot with add=TRUE
plotRGB (S2_stack, r=4, g=3, b=2, scale=maxValue(S2[[2]]), stretch='hist') #FalseColor image
plot(Study_Area2, add=TRUE, border='yellow', lwd=5)


S2_stack_crop <- crop(S2_stack, Study_Area2)
par(mfrow=c(1,2))
plotRGB (S2_stack_crop, r=3, g=2, b=1, scale=maxValue(S2[[2]]), stretch='hist')
plotRGB (S2_stack_crop, r=4, g=3, b=2, scale=maxValue(S2[[2]]), stretch='hist')


#Derive NDVI with for loop cycle 
NDVI <- list()
for (i in 1:(length(S2)/4)) {
  NDVI[[i]] <- overlay(S2_stack_crop[[((i-1)*4+3)]], S2_stack_crop[[((i - 1)*4+4)]], fun = function(x,y) (y-x)/(y+x))
  names(NDVI[[i]]) <- paste0("NDVI_", strsplit(strsplit(names(S2_stack_crop[[(i-1)*4+4]]), "_")[[1]][2], "T")[[1]][1])
}
NDVI
# doesn't work (too slow)
# I cropped out the study area because otherwise it was too slow to load the files 
### NOW WORKS #####




